import 'package:dio/dio.dart';/// Base class for handling failuresabstract class Failure {  final String errMessage;  const Failure(this.errMessage);}/// Class to handle server-related failuresclass ServerFailure extends Failure {  ServerFailure(super.errMessage);  factory ServerFailure.unauthorized() {    return ServerFailure("Unauthorized access. Please login again.");  }  /// Factory constructor to create a [ServerFailure] from a Dio error.  factory ServerFailure.fromDioError(DioException dioError) {    // Log the Dio error for debugging purposes    // print('DioError: ${dioError.type}, Message: ${dioError.message}');    switch (dioError.type) {      case DioExceptionType.connectionTimeout:        return ServerFailure('Connection timeout with ApiServer');      case DioExceptionType.connectionError:        return ServerFailure('No Internet Connection');      case DioExceptionType.sendTimeout:        return ServerFailure('Send timeout with ApiServer');      case DioExceptionType.receiveTimeout:        return ServerFailure('Receive timeout with ApiServer');      case DioExceptionType.badResponse:        return dioError.response != null            ? ServerFailure.fromResponse(                dioError.response!.statusCode, dioError.response!.data)            : ServerFailure('Bad response from ApiServer');      case DioExceptionType.cancel:        return ServerFailure('Request to ApiServer was canceled');      case DioExceptionType.unknown:        return ServerFailure('Unexpected Error, Please try again!');      default:        return ServerFailure('Oops, there was an error. Please try again.');    }  }  /// Factory constructor to create a [ServerFailure] from a response.  factory ServerFailure.fromResponse(int? statusCode, dynamic response) {    // Log the response for debugging purposes    // print('45- Response statusCode: $statusCode, Response: $response');    if (response is Map<String, dynamic>) {      // Detailed logging of the response structure      response.forEach((key, value) {        // print('50- Response key: $key, value: $value');      });      if (response.containsKey('error')) {        final error = response['error'];        if (error is Map<String, dynamic> && error.containsKey('message')) {          return ServerFailure(error['message']);        } else if (error is String) {          return ServerFailure(error);        }      }      // Handle other known error structures      if (response.containsKey('message')) {        return ServerFailure(response['message']);      }    } else if (response is String) {      return ServerFailure(response);    }    // Handle specific status codes    switch (statusCode) {      case 400:      case 401:      case 403:        return ServerFailure(            'Authentication error: ${response['error']['message'] ?? 'Unknown error'}');      case 404:        return ServerFailure('Your request not found. Please try later!');      case 500:        return ServerFailure('Internal Server error. Please try later.');      default:        return ServerFailure('Oops, there was an error. Please try again.');    }  }}