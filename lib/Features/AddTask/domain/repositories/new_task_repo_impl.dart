import 'dart:io';import 'package:dartz/dartz.dart';import 'package:dio/dio.dart';import 'package:http_parser/http_parser.dart';import 'package:tasky/Core/Network/Local/local_string.dart';import 'package:tasky/Core/Utils/Errors/failure.dart';import '../../../../Core/Network/Local/cash_helper.dart';import '../../../../Core/Network/Remote/dio.dart';import '../../../../Core/Network/Remote/endpoints.dart';import '../../data/models/new_task_model.dart';import '../../data/repositories/new_task_repo.dart';class NewTaskRepoImpl implements NewTaskRepo {  @override  Future<Either<Failure, bool>> createNewTask(      {required NewTaskModel model}) async {    try {      final token = CashHelper.getData(key: LocalString.token);      await DioHelper.postData(        path: AppEndPoint.createTask,        token: token,        data: model,      );      return right(true);    } catch (e) {      if (e is DioException) {        return left(ServerFailure.fromDioError(e));      } else {        return left(ServerFailure.fromResponse(e.hashCode, e));      }    }  }  @override  Future<Either<Failure, String>> uploadImage({required File image}) async {    try {      final token = CashHelper.getData(key: LocalString.token);      String fileName = image.path.split('/').last;      String fileExtension = fileName.split('.').last.toLowerCase();      if (!['jpg', 'jpeg', 'png', 'gif'].contains(fileExtension)) {        return left(            ServerFailure.fromResponse(422, 'File is not a valid image.'));      }      FormData formData = FormData.fromMap({        'image': await MultipartFile.fromFile(          image.path,          filename: fileName,          contentType: MediaType('image', fileExtension),        ),      });      var response = await DioHelper.postData(          path: AppEndPoint.uploadImage, data: formData, token: token);      if (response.statusCode == 201) {        // print('51: ${response.data['image'].toString()}');      }      return right(response.data['image'].toString());    } catch (e) {      if (e is DioException) {        return left(ServerFailure.fromDioError(e));      } else {        return left(ServerFailure.fromResponse(e.hashCode, e.toString()));      }    }  }}