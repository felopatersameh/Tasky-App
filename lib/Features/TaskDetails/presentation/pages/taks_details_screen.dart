import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:tasky/Core/Resources/auth.dart';import 'package:tasky/Core/Resources/colors.dart';import 'package:tasky/Core/Resources/string.dart';import 'package:tasky/Core/Resources/styles.dart';import 'package:tasky/Core/Utils/Extensions/size_box.dart';import 'package:tasky/Core/Utils/Widget/Images/build_image_cash.dart';import 'package:tasky/Features/Home/data/models/task_model.dart';import 'package:tasky/Features/TaskDetails/presentation/manager/task_cubit.dart';import '../../../../Core/Utils/Widget/qr_build.dart';import '../widgets/build_popup_menu_button.dart';import '../widgets/drop_down_button_form_field.dart';class TaskDetailsScreen extends StatefulWidget {  final TaskModel item;  const TaskDetailsScreen({super.key, required this.item});  @override  State<TaskDetailsScreen> createState() => _TaskDetailsScreenState();}late DateTime dateTime;late bool hasPassed;class _TaskDetailsScreenState extends State<TaskDetailsScreen> {  @override  void initState() {    //!removed    DateTime now = DateTime.now();    dateTime = DateTime.parse(widget.item.createdAt!);    hasPassed = dateTime.isBefore(now);    super.initState();  }  @override  Widget build(BuildContext context) {    return BlocBuilder<TaskCubit, TaskState>(      builder: (context, state) {        return _buildScaffold();      },    );  }  Scaffold _buildScaffold() => Scaffold(        appBar: AppBar(title: const Text(''), actions: [          BuildPopupMenuButton(            id: widget.item.id!,          ),        ]),        body: SingleChildScrollView(            child: Padding(          padding: const EdgeInsets.all(16.0),          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Center(child: BuildImageCash(urlImage: widget.item.image!)),              8.sH,              Text(widget.item.title!, style: getBigText()),              8.sH,              Text(widget.item.desc!, style: getMediumText()),              16.sH,              //todo              Container(                padding:                    const EdgeInsets.symmetric(horizontal: 6, vertical: 10),                color: AppColors.colorSecond,                child: Row(                  mainAxisAlignment: MainAxisAlignment.spaceBetween,                  children: [                    Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        if (hasPassed) Text('End Date', style: getSmallText1()),                        Text(                          formatDate(widget.item.createdAt!),                          style: getItemTitle()                              .copyWith(color: AppColors.colorPrimary),                        ),                      ],                    ),                    const Icon(Icons.calendar_today,                        color: AppColors.colorPrimary),                  ],                ),              ),              16.sH,              DropdownButtonFormFieldTasks(                status: widget.item.status!,                label: 'Status',                items: _itemsStatus(),              ),              16.sH,              DropdownButtonFormFieldTasks(                status: widget.item.priority!,                label: 'Priority',                items: _itemsPriority(),              ),              16.sH,              QrBuilding(item: widget.item.id!)            ],          ),        )),      );}List<DropdownMenuItem<String>> _itemsStatus() {  return const [    DropdownMenuItem(      value: AppStrings.statusP,      child: Text(AppStrings.statusP),    ),    DropdownMenuItem(      value: AppStrings.statusW,      child: Text(AppStrings.statusW),    ),    DropdownMenuItem(      value: AppStrings.statusF,      child: Text(AppStrings.statusF),    ),  ];}List<DropdownMenuItem<String>> _itemsPriority() {  return const [    DropdownMenuItem(      value: 'low',      child: Text('Low Priority'),    ),    DropdownMenuItem(      value: 'medium',      child: Text('Medium Priority'),    ),    DropdownMenuItem(      value: 'high',      child: Text('High Priority'),    ),  ];}