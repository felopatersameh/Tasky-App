import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../../../Config/Route/next_screen.dart';import '../../../../../Config/Route/route_app.dart';import '../../../../../Core/Resources/string.dart';import '../../../../../Core/Resources/validate.dart';import '../../../../../Core/Utils/Widget/TextField/build_text_field.dart';import '../../../../../Core/Utils/Widget/TextField/phone_field.dart';import '../../../../../Core/Utils/Widget/build_bottom_authentication.dart';import '../../../../../Core/Utils/Widget/build_button.dart';import '../../../../../Core/Utils/Widget/custom_scaffold_messenger.dart';import '../manager/sing_up_cubit.dart';import 'custom_drop_down.dart';class FormSingUp extends StatefulWidget {  const FormSingUp({super.key});  @override  State<FormSingUp> createState() => _FormSingUpState();}class _FormSingUpState extends State<FormSingUp> {  final key = GlobalKey<FormState>();  String? selectedValue;  TextEditingController phoneController = TextEditingController();  TextEditingController passwordController = TextEditingController();  TextEditingController nameController = TextEditingController();  TextEditingController addressController = TextEditingController();  TextEditingController levelController = TextEditingController();  TextEditingController experienceYearsController = TextEditingController();  @override  Widget build(BuildContext context) {    return BlocConsumer<SingUpCubit, SingUpState>(      listener: (context, state) {        if (state is SingUpSuccess) {          showSnackBar(context, AppStrings.successMessage);          pushReplacement(context, Routes.routeHome);        } else if (state is SingUpFailed) {          showSnackBar(context, state.error);        }      },      builder: (context, state) {        return Form(            key: key,            child: Column(              children: [                DefaultTextFormField(                  text: AppStrings.name,                  type: TextInputType.name,                  inputValidator: (value) =>                      validateName(name: value.toString()),                  controller: nameController,                ),                CustomInternationalPhoneNumberInput(                  controller: phoneController,                ),                DefaultTextFormField(                  text: AppStrings.experienceYears,                  type: TextInputType.number,                  inputValidator: (value) => defaultValidate(                      text: value.toString(),                      validate: AppStrings.experienceYearsValidate),                  controller: experienceYearsController,                ),                ExperienceDropdown(                  onChanged: (value) {                    levelController.text = value.toString();                    SingUpCubit.get(context).changeValue(value);                  },                ),                DefaultTextFormField(                  text: AppStrings.address,                  type: TextInputType.streetAddress,                  inputValidator: (value) => defaultValidate(                      text: value.toString(),                      validate: AppStrings.addressValidate),                  controller: addressController,                ),                DefaultTextFormField(                  pressSuffix: () =>                      SingUpCubit.get(context).changeShowPassword(),                  suffix: SingUpCubit.get(context).iconSuffix,                  text: AppStrings.password,                  isPassword: SingUpCubit.get(context).isShowPassword,                  type: TextInputType.visiblePassword,                  inputValidator: (value) =>                      validatePassword(true, password: value.toString()),                  controller: passwordController,                ),                DefaultButton(                  width: MediaQuery.of(context).size.width * .8,                  press: () => validateSingIn(context,                      key: key,                      password: passwordController.text,                      phone: phoneController.text,                      name: nameController.text,                      experienceYears:                          num.tryParse(experienceYearsController.text) ?? 0,                      address: addressController.text,                      level: levelController.text),                  text: AppStrings.singIN,                  condition: true,                ),                const BuildBottomAuthentication(                  isLogIn: false,                )              ],            ));      },    );  }}