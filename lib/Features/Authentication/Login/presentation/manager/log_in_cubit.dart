import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:tasky/Core/Resources/icons.dart';import 'package:tasky/Features/Login/domain/use_cases/log_in_use_case.dart';import '../../../Authentication/data/models/login_model.dart';part 'log_in_state.dart';class LogInCubit extends Cubit<LogInState> {  LogInCubit(this.loginUseCase) : super(LogInInitial());  static LogInCubit get(context) => BlocProvider.of(context);  final LoginUseCase loginUseCase;  bool isShowPassword = true;  IconData iconSuffix = AppIcons.showEye;  void changeShowPassword() {    isShowPassword = !isShowPassword;    isShowPassword == true        ? iconSuffix = AppIcons.showEye        : iconSuffix = AppIcons.unShowEye;    emit(LoginChangesShowPassword());  }  Future<void> login({    required String phone,    required String password,  }) async {    emit(LoginLoading());    await loginUseCase.execute(phone: phone, password: password).then((value) {      value.fold((failure) => emit(LoginFailed(error: failure.errMessage)),          (user) => emit(LoginSuccess(model: user)));    });  }}