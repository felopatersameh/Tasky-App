import 'dart:io';import 'package:bloc/bloc.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:meta/meta.dart';import 'package:tasky/Core/Network/Remote/endpoints.dart';import 'package:tasky/Core/Utils/Widget/custom_massage.dart';import 'package:tasky/Features/AddNewTask/data/models/AddTaskModel.dart';import 'package:tasky/Features/AddNewTask/data/repositories/task_repo.dart';import 'package:tasky/Features/TaskDetails/data/repositories/task_repo.dart';part 'new_task_state.dart';class NewTaskCubit extends Cubit<NewTaskState> {  NewTaskCubit(this.taskRepo) : super(NewTaskInitial());  final AddTaskRepo taskRepo;  String? _image;  String? priority;  static NewTaskCubit get(context) => BlocProvider.of(context);  Future<void> uploadImage({required File image}) async {    emit(UploadImageLoading());    await taskRepo.uploadImage(image: image).then((value) {      value          .fold((failure) => emit(UploadImageFailed(error: failure.errMessage)),              (image) {        print(image);        _image = image;        emit(UploadImageSuccess(model: image));      });    });  }  Future<void> createTask({    required String title,    required String desc,  }) async {    if (_image == null || priority == null) {      const CustomMassage(massage: 'Image or priority is null');      return;    }    emit(CreateTaskLoading());    AddTaskModel model = AddTaskModel(      image: '${AppEndPoint.baseUrl}images/$_image',      title: title,      desc: desc,      priority: priority,    );    await taskRepo.createNewTask(model: model).then((value) {      value.fold((failure) => emit(CreateTaskFailed(error: failure.errMessage)),          (value) {        emit(CreateTaskSuccess(model: value));      });    });  }}