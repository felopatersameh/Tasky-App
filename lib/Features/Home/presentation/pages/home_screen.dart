import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:tasky/Core/Resources/string.dart';import 'package:tasky/Core/Resources/styles.dart';import 'package:tasky/Core/Utils/Extensions/padding.dart';import 'package:tasky/Features/Home/presentation/manager/home_cubit.dart';import 'package:tasky/Features/Home/presentation/widgets/custom_floating.dart';import '../../../../Config/Route/next_screen.dart';import '../../../../Config/Route/route_app.dart';import '../../../../Core/Utils/Widget/custom_loading.dart';import '../../../../Core/Utils/Widget/custom_massage.dart';import '../widgets/TabBar/build_button_tab_bar.dart';import '../widgets/custom_app_bar_home.dart';import '../widgets/TabBar/tab_bar.dart';class HomeScreen extends StatefulWidget {  const HomeScreen({super.key});  @override  State<HomeScreen> createState() => _HomeScreenState();}class _HomeScreenState extends State<HomeScreen>    with SingleTickerProviderStateMixin {  late AnimationController _animationController;  late Animation<double> _fadeAnimation;  late Animation<double> _scaleAnimation;  @override  void initState() {    super.initState();    HomeCubit.get(context).getListTasks();    _animationController = AnimationController(      duration: const Duration(milliseconds: 500),      vsync: this,    );    _fadeAnimation = CurvedAnimation(      parent: _animationController,      curve: Curves.easeIn,    );    _scaleAnimation = Tween<double>(      begin: 0.0,      end: 1.0,    ).animate(CurvedAnimation(      parent: _animationController,      curve: Curves.easeOut,    ));    _animationController.forward();  }  @override  void dispose() {    _animationController.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    return BlocConsumer<HomeCubit, HomeState>(      listener: (context, state) {        if (state is LogoutSuccess) {          pushReplacement(context, Routes.routeLogin);        }        if (state is RemoveTaskSuccess || state is RefreshTokenSuccess) {          HomeCubit.get(context).getListTasks();        }      },      builder: (context, state) {        if (state is HomeSuccess) {          return _BodyHome(            fadeAnimation: _fadeAnimation,            scaleAnimation: _scaleAnimation,            state: state,          );        } else if (state is HomeFailed) {          return CustomMassage(            massage: state.error,          );        } else {          return const CustomLoading();        }      },    );  }}class _BodyHome extends StatelessWidget {  const _BodyHome({    required Animation<double> fadeAnimation,    required Animation<double> scaleAnimation,    required this.state,  })  : _fadeAnimation = fadeAnimation,        _scaleAnimation = scaleAnimation;  final Animation<double> _fadeAnimation;  final Animation<double> _scaleAnimation;  final HomeSuccess state;  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: buildAppBarTasks(context),      body: FadeTransition(        opacity: _fadeAnimation,        child: DefaultTabController(          length: 4,          child: Column(            children: [              Align(                alignment: Alignment.centerLeft,                child: Text(                  AppStrings.titleList,                  style: getMediumText()                      .copyWith(fontWeight: FontWeight.w700, fontSize: 18),                ).paddingSH(                    30), // Ensure paddingSH is a valid extension method or replace with padding              ),              const BuildButtonsTabBar(),              ViewItemsTabBar(                list: state.model,              ),            ],          ),        ),      ),      floatingActionButton: ScaleTransition(        scale: _scaleAnimation,        child: customFloatingActionButton(context),      ),      floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,    );  }}