import 'package:buttons_tabbar/buttons_tabbar.dart';import 'package:flutter/material.dart';import 'package:tasky/Config/asset.dart';import 'package:tasky/Core/Resources/colors.dart';import 'package:tasky/Core/Resources/styles.dart';import 'package:tasky/Core/Utils/Extensions/padding.dart';import 'package:tasky/Core/Utils/Widget/build_image.dart';class TaskManagementScreen extends StatelessWidget {  const TaskManagementScreen({super.key});  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: buildAppBarTasks(context),      body: const DefaultTabController(        length: 4,        child: Column(          children: [            Row(              children: [                Text('My Tasks'),              ],            ),            BuildButtonsTabBar(),            ViewItemsTabBar(),          ],        ),      ),      floatingActionButton: customFloatingActionButton(),      floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,    );  }  AppBar buildAppBarTasks(BuildContext context) {    return AppBar(      toolbarHeight: MediaQuery.of(context).size.height * .08,      title: Container(          padding: const EdgeInsets.all(5),          color: AppColors.colorPrimary,          child: BuildImageAssets(            url: AppAssets.appLogo,            typeSVg: true,            width: MediaQuery.of(context).size.width * .2,            // height: ,          )),      actions: [        IconButton(onPressed: () {}, icon: const Icon(Icons.logout_rounded)),        IconButton(            onPressed: () {}, icon: const Icon(Icons.account_circle_outlined))      ],    );  }  Widget customFloatingActionButton() => Column(        mainAxisAlignment: MainAxisAlignment.end,        children: [          FloatingActionButton(            mini: true,            onPressed: () {},            child: const Icon(Icons.add),          ).paddingSV(10),          FloatingActionButton(            onPressed: () {},            child: const Icon(Icons.add),          ).paddingSV(10),        ],      ).paddingSH(15);}class ViewItemsTabBar extends StatelessWidget {  const ViewItemsTabBar({    super.key,  });  @override  Widget build(BuildContext context) {    return Expanded(      child: TabBarView(        children: [          TaskList(status: 'All'),          TaskList(status: 'In progress'),          TaskList(status: 'Waiting'),          TaskList(status: 'Finished'),        ],      ),    );  }}class BuildButtonsTabBar extends StatelessWidget {  const BuildButtonsTabBar({    super.key,  });  @override  Widget build(BuildContext context) {    return ButtonsTabBar(      contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),      physics: const BouncingScrollPhysics(),      backgroundColor: AppColors.colorPrimary,      unselectedBackgroundColor: Colors.grey[300],      unselectedLabelStyle: const TextStyle(color: AppColors.colorPrimaryText),      labelStyle: getBigText().copyWith(color: Colors.white, fontSize: 18),      radius: 20,      labelSpacing: 10,      tabs: const [        Tab(          text: 'All',        ),        Tab(text: 'In progress'),        Tab(text: 'Waiting'),        Tab(text: 'Finished'),      ],    );  }}class TaskList extends StatelessWidget {  final String status;  TaskList({required this.status});  @override  Widget build(BuildContext context) {    return ListView(      children: [        TaskItem(          icon: Icons.shopping_cart,          title: 'Grocery Shopping',          description: 'This application is designed for...',          status: status == 'All' ? 'Waiting' : status,          priority: 'Medium',          dueDate: '30/12/2022',        ),        TaskItem(          icon: Icons.check_circle,          title: 'Grocery Check',          description: 'This application is designed for...',          status: status == 'All' ? 'Inprogress' : status,          priority: 'Low',          dueDate: '30/12/2022',        ),        TaskItem(          icon: Icons.done,          title: 'Grocery Online',          description: 'This application is designed for...',          status: status == 'All' ? 'Finished' : status,          priority: 'High',          dueDate: '30/12/2022',        ),      ],    );  }}class TaskItem extends StatelessWidget {  final IconData icon;  final String title;  final String description;  final String status;  final String priority;  final String dueDate;  const TaskItem({    super.key,    required this.icon,    required this.title,    required this.description,    required this.status,    required this.priority,    required this.dueDate,  });  @override  Widget build(BuildContext context) {    return ListTile(      leading: Icon(icon),      title: Row(        mainAxisAlignment: MainAxisAlignment.spaceBetween,        children: [Text(title), Text(status)],      ).paddingSH(15),      subtitle: Column(        crossAxisAlignment: CrossAxisAlignment.start,        children: [          Text(description),          Row(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              Row(                children: [                  const Icon(Icons.outlined_flag_outlined),                  Text(priority),                ],              ),              Text(dueDate),            ],          ),        ],      ).paddingSH(15),      trailing: const Icon(Icons.more_vert_outlined),    ).paddingAll(10);  }}