import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intl/intl.dart';import 'package:tasky/Core/Resources/string.dart';import 'package:tasky/Core/Utils/Widget/custom_scaffold_messenger.dart';import '../../data/models/task_model.dart';import '../../domain/use_cases/home_use_case.dart';part 'home_state.dart';class HomeCubit extends Cubit<HomeState> {  HomeCubit(this.getAllTasksUseCase, this.logoutUseCase, this.removeTaskUseCase, this.refreshTokenUseCase, this.editTaskUseCase) : super(HomeInitial());  final GetAllTasksUseCase getAllTasksUseCase;  final LogoutUseCase logoutUseCase;  final RemoveTaskUseCase removeTaskUseCase;  final RefreshTokenUseCase refreshTokenUseCase;  final EditTaskUseCase editTaskUseCase;  static HomeCubit get(context) => BlocProvider.of(context);  Future<void> getListTasks() async {    emit(HomeLoading());    await getAllTasksUseCase.call().then((value) {      value.fold((failure) {        if (failure.errMessage == AppStrings.unauthorized) {          emit(Unauthorized());          getRefresh();        } else {          emit(HomeFailed(error: failure.errMessage));        }      }, (user) => emit(HomeSuccess(model: user)));    });  }  Future<void> removeTask(context, String id) async {    emit(RemoveTaskLoading());    await removeTaskUseCase.call(id: id).then((value) {      value.fold((failure) {        if (failure.errMessage == AppStrings.unauthorized) {          emit(Unauthorized());        } else {          emit(RemoveTaskFailed(error: failure.errMessage));        }      }, (user) => emit(RemoveTaskSuccess(model: user)));    });  }  Future<void> logout(context) async {    emit(LogoutLoading());    await logoutUseCase.call().then((value) {      value.fold((failure) {        if (failure.errMessage == AppStrings.unauthorized) {          emit(Unauthorized());          getRefresh();        } else {          emit(LogoutFailed(error: failure.errMessage));        }      }, (user) => emit(LogoutSuccess(model: user)));    });  }  String? controllerTitle;  String? priority;  String? controllerDescription;  String? status;  String? imageTask;  Future<void> editTask(context, TaskModel oldItem) async {    emit(UpdateTaskLoading());    DateTime now = DateTime.now();    String formattedDate = DateFormat('yyyy-MM-ddTHH:mm:ss.SSSZ').format(now);    TaskModel newItem = TaskModel(      createdAt: oldItem.createdAt,      updatedAt: formattedDate,      user: oldItem.user,      v: oldItem.v! + 1,      id: oldItem.id,      desc: controllerDescription,      title: controllerTitle,      status: status,      priority: priority,      image: imageTask,    );    if (status == null ||        priority == null ||        imageTask == null ||        controllerTitle == null ||        controllerDescription == null) {      showSnackBar(context, "SomeThing Empty");    } else {      await editTaskUseCase.call(item: newItem).then((value) {        value.fold((failure) {          if (failure.errMessage == AppStrings.unauthorized) {            emit(Unauthorized());          } else {            emit(UpdateTaskFailed(error: failure.errMessage));          }        }, (user) => emit(UpdateTaskSuccess(model: user)));      });    }  }  Future<void> getRefresh() async {    emit(RefreshTokenLoading());    await refreshTokenUseCase.call().then((value) {      value.fold(          (failure) => emit(RefreshTokenFailed(error: failure.errMessage)),          (task) async {        emit(RefreshTokenSuccess(model: task));      });    });  }}