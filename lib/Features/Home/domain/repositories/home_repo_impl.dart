import 'package:dartz/dartz.dart';import 'package:dio/dio.dart';import 'package:tasky/Core/Utils/Errors/failure.dart';import 'package:tasky/Features/Home/data/models/TaskModel.dart';import 'package:tasky/Features/Home/data/repositories/home_repo.dart';import '../../../../Core/Network/Local/cachehelper.dart';import '../../../../Core/Network/Remote/dio.dart';import '../../../../Core/Network/Remote/endpoints.dart';import '../../../../Core/Resources/auth.dart';class HomeRepoImpl implements HomeRepo {  @override  Future<Either<Failure, List<TaskModel>>> getAllDataTasks() async {    try {      final token = CashHelper.getData(key: 'Token');      var data = await DioHelper.getData(path: AppEndPoint.list, token: token);      final List<dynamic> jsonData = data.data;      final List<TaskModel> tasks = jsonData.map((json) => TaskModel.fromJson(json)).toList();      return right(tasks);    } catch (e) {      if (e is DioException) {        if (e.response?.statusMessage == 'Unauthorized') {          print('24  -is Unauthorized');          String? newToken = await refreshToken();          if (newToken != null) {            return getAllDataTasks();          } else {            return left(ServerFailure.fromDioError(e));          }        } else {          return left(ServerFailure.fromDioError(e));        }      } else {        return left(ServerFailure.fromResponse(e.hashCode, e));      }    }  }  @override  Future<Either<Failure, bool>> logout() {    // TODO: implement logout    throw UnimplementedError();  }  @override  Future<Either<Failure, bool>> removeTask({required String id}) async {    try {      String token = CashHelper.getData(        key: 'Token',      );      await DioHelper.deleteData(          path: '${AppEndPoint.delete}/$id', token: token);      return right(true);    } catch (e) {      if (e is DioException) {        if (e.response?.statusCode == 401) {          String? newToken = await refreshToken();          if (newToken != null) {            return removeTask(id: id);          } else {            return left(ServerFailure.fromDioError(e));          }        } else {          return left(ServerFailure.fromDioError(e));        }      } else {        return left(ServerFailure.fromResponse(e.hashCode, e));      }    }  }}