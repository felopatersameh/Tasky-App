import 'package:dartz/dartz.dart';import '../../../../Core/Utils/Errors/failure.dart';import '../../data/models/task_model.dart';import '../../data/repositories/home_repo.dart';class GetAllTasksUseCase {  final HomeRepo homeRepo;  GetAllTasksUseCase(this.homeRepo);  Future<Either<Failure, List<TaskModel>>> call() {    return homeRepo.getAllDataTasks();  }}class LogoutUseCase {  final HomeRepo homeRepo;  LogoutUseCase(this.homeRepo);  Future<Either<Failure, bool>> call() {    return homeRepo.logout();  }}class RemoveTaskUseCase {  final HomeRepo homeRepo;  RemoveTaskUseCase(this.homeRepo);  Future<Either<Failure, bool>> call({required String id}) {    return homeRepo.removeTask(id: id);  }}class RefreshTokenUseCase {  final HomeRepo homeRepo;  RefreshTokenUseCase(this.homeRepo);  Future<Either<Failure, String>> call() {    return homeRepo.refreshToken();  }}class EditTaskUseCase {  final HomeRepo homeRepo;  EditTaskUseCase(this.homeRepo);  Future<Either<Failure, String>> call({required TaskModel item}) {    return homeRepo.editTask(item: item);  }}